#!/bin/bash
# -*- coding: UTF-8 -*-

# Script for building cryptopp library for multiple platforms.


### Define text styles  ###########
TXT_C="tput setaf"    # set text color in BGR format
TXT_R="tput sgr0"     # reset text format
TXT_B="tput bold"     # set bold
TXT_U="tput sgr 0 1"  # set underlined

# Detect directory in which the script resides
BASEDIR=$(dirname "`[[ $0 == /* ]] && echo "$0" || echo "${PWD}/${0#./}"`")

# Define output directory if not defined yet
[ -z "$STAGING_PREFIX" ] && STAGING_PREFIX=$BASEDIR/../../../../hookflash-staging

# Detect OS
UNAME=$(uname)

validate_before(){
    [ $? != "0" ] && exit 1 || true
}

caption(){
	echo -e "\n`$TXT_B`Build script`$TXT_R` for building `$TXT_B`cryptopp`$TXT_R` library for multiple platforms."
	echo -e "Maintainer: `$TXT_B`Predrag Mandic`$TXT_R` [`$TXT_U``$TXT_C 4`predrag@hookflash.com`$TXT_R`]`$TXT_R`"
}

help_darwin(){
	caption
	usage_darwin
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R` | x86_64 | i386"
	echo -e "\t\tAll of these options build the same libraries that work on OS X on a current processor architecture (32 or 64 bit). They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`arm`$TXT_R` | ios"
	echo -e "\t\tBoth of these options build the same libraries that work on iOS armV7 and armV7s. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and ios libraries."
	echo -e "\t`$TXT_B`clean`$TXT_R`"
	echo -e "\t\tDeletes staged libraries for all architectures."
	echo ""
}

usage_darwin(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

usage_darwin_clean(){
	echo "Usage: build clean {arm|x86|all}"
}

help_linux(){
	caption
	usage_linux
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R` | x86_64 | i386"
	echo -e "\t\tAll of these options build the same libraries that work on Linux on a current processor architecture (32 or 64 bit). They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`arm`$TXT_R` | android"
	echo -e "\t\tBoth of these options build the same libraries that work on Android. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and android libraries."
	echo -e "\t`$TXT_B`clean ARCH`$TXT_R`"
	echo -e "\t\tDeletes staged libraries, binaries and header files for ARCH architecture."
	echo ""
}

usage_linux(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

usage_linux_clean(){
	echo "Usage: build clean {arm|x86|all}"
}

build_darwin(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
}

build_ios(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
}

clean_ios(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
}

build_linux(){
	echo "`$TXT_B``$TXT_C 2`cryptopp build for Linux started...`$TXT_R`"
	mkdir -p $STAGING_PREFIX; validate_before
	pushd $BASEDIR/../../cryptopp
		make libcryptopp.so; validate_before
		make install.so PREFIX=$STAGING_PREFIX; validate_before
	popd
}

clean_linux(){
	echo "Cleaning Linux architecture..."
	
	rm -f $STAGING_PREFIX/lib/libcryptopp.*
	rm -rf $STAGING_PREFIX/include/cryptopp
	pushd $BASEDIR/../../cryptopp
		make clean
	popd

	echo "Done!"
}

build_android(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
}

clean_android(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
}


case "$UNAME" in
	Linux)
		case "$1" in
			arm|android)
				build_android
				;;
			x86|x86_64|i386)
				build_linux
				;;
			all)
				build_linux
				build_android
				;;
			clean)
				case "$2" in
					x86|x86_64|i386)
						clean_linux
						;;
					arm|android)
						clean_android
						;;
					all)
						clean_linux
						clean_android
						;;
					*)
						usage_linux_clean
						exit 1
						;;
				esac
				;;
			help)
				help_linux
				;;
			*)
				usage_linux
				exit 1
				;;
		esac
		;;

	Darwin)
		case "$1" in
			arm|ios)
				build_ios
				;;
			x86|x86_64|i386|osx)
				build_darwin
				;;
			all)
				build_darwin
				build_ios
				;;
			clean)
				case "$2" in
					arm|ios)
						clean_ios
						;;
					x86|x86_64|i386|osx)
						clean_darwin
						;;
					all)
						clean_darwin
						clean_ios
						;;
					*)
						usage_darwin_clean
						exit 1
						;;
				esac
				;;
			help)
				help_darwin
				;;
			*)
				usage_darwin
				exit 1
				;;
		esac
		;;
	*)
		echo "`$TXT_B`$UNAME`$TXT_R`: `$TXT_C 1`operating system not supported`$TXT_R`"
		exit 1
		;;
esac

